buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id 'net.researchgate.release' version '2.8.0'
    id "com.jfrog.bintray" version "1.7.3"
    id 'jacoco'
    id 'java'
}

apply from: 'release-lib.gradle'
apply from: 'build-quality.gradle'
apply from: 'jacoco.gradle'


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://dl.bintray.com/epam/reportportal" }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

project.description = 'EPAM Report portal. Common DAO Layer'
sourceCompatibility = 1.8
targetCompatibility = 1.8

wrapper {
    gradleVersion = '5.4.1'
}

dependencyManagement {
    imports {
        mavenBom "com.github.reportportal:commons-bom:master-SNAPSHOT"
    }
}

project.ext {
    limits = [
            'instruction': 70,
            'branch'     : 36,
            'line'       : 60,
            'complexity' : 49,
            'method'     : 55,
            'class'      : 87
    ]
    releaseMode = project.hasProperty("releaseMode")
}


dependencies {

    if (releaseMode) {
        compile 'com.epam.reportportal:commons:3.1.0'
        compile 'com.epam.reportportal:commons-rules:4.0.1'
    } else {
        compile('com.github.reportportal:commons:71d4aca')
        compile 'com.github.reportportal:commons-rules:5f57515'
        compile 'com.github.reportportal:commons-model:a8a0026'
    }

    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.3'

    compile 'org.lokra.seaweedfs:seaweedfs-client:0.7.3.RELEASE'

    compile group: 'org.jooq', name: 'jooq', version: '3.11.4'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '6.0.7.Final'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.10.RELEASE'

    compile('org.postgresql:postgresql')
    runtime('org.postgresql:postgresql')

    compile 'org.springframework.boot:spring-boot'
    compile 'org.springframework.boot:spring-boot-autoconfigure'
    compile 'org.springframework:spring-context-support'
    compile 'com.github.ben-manes.caffeine:caffeine'

    compile 'net.coobird:thumbnailator:0.4.8'
    compile 'commons-validator:commons-validator:1.6'
    compile 'com.google.guava:guava:23.0'
    compile 'org.jasypt:jasypt:1.9.2'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'org.reflections:reflections:0.9.11'

    compile 'org.apache.tika:tika-core:1.17'
    compile 'org.apache.tika:tika-parsers:1.17'

    compile group: 'io.zonky.test', name: 'embedded-postgres', version: '1.2.1'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'
    testCompile group: 'org.flywaydb.flyway-test-extensions', name: 'flyway-spring-test', version: '5.2.1'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'org.assertj:assertj-core:3.9.0'

    testCompile 'org.springframework:spring-test'
    testCompile 'org.springframework.security:spring-security-crypto'
    testCompile 'org.springframework.security:spring-security-core'
    testCompile 'org.hibernate:hibernate-validator:6.0.7.Final'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'


}

private static void copyFromUrl(GString localScriptPath, String scriptUrl) {
    def file = new File(localScriptPath)
    if (file.exists()) {
        file.delete()
    }
    file.getParentFile().mkdirs()
    file.createNewFile()
    file << new URL(scriptUrl).openStream()
}

task copyTestDatabaseScripts {
    def initScriptPath = "${projectDir}/src/test/resources/db/migration/V001__initialize_schema.sql"
    def initScriptUrl = "https://raw.githubusercontent.com/reportportal/migrations/master/migrations/1_initialize_schema.up.sql"
    copyFromUrl(initScriptPath, initScriptUrl)

    def dataScriptPath = "${projectDir}/src/test/resources/db/migration/V002__default_data.sql"
    def dataScriptUrl = "https://raw.githubusercontent.com/reportportal/migrations/master/migrations/3_default_data.up.sql"
    copyFromUrl(dataScriptPath, dataScriptUrl)
}


tasks.withType(Javadoc).all { enabled = false }

test {
    useJUnitPlatform()

    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}

release {
    git {
        requireBranch = 'postgres-migration'
    }
}

test.dependsOn copyTestDatabaseScripts
build.dependsOn jacocoTestReport
