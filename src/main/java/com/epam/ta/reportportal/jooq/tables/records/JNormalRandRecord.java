/*
 * Copyright (C) 2018 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables.records;


import com.epam.ta.reportportal.jooq.tables.JNormalRand;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Row1;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JNormalRandRecord extends TableRecordImpl<JNormalRandRecord> implements Record1<Double> {

    private static final long serialVersionUID = 352265826;

    /**
     * Setter for <code>public.normal_rand.normal_rand</code>.
     */
    public void setNormalRand(Double value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.normal_rand.normal_rand</code>.
     */
    public Double getNormalRand() {
        return (Double) get(0);
    }

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row1<Double> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row1<Double> valuesRow() {
        return (Row1) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field1() {
        return JNormalRand.NORMAL_RAND.NORMAL_RAND_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component1() {
        return getNormalRand();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value1() {
        return getNormalRand();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JNormalRandRecord value1(Double value) {
        setNormalRand(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JNormalRandRecord values(Double value1) {
        value1(value1);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JNormalRandRecord
     */
    public JNormalRandRecord() {
        super(JNormalRand.NORMAL_RAND);
    }

    /**
     * Create a detached, initialised JNormalRandRecord
     */
    public JNormalRandRecord(Double normalRand) {
        super(JNormalRand.NORMAL_RAND);

        set(0, normalRand);
    }
}
