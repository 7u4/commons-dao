/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.tables.records.ItemTagRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemTag extends TableImpl<ItemTagRecord> {

    private static final long serialVersionUID = 131809025;

    /**
     * The reference instance of <code>public.item_tag</code>
     */
    public static final ItemTag ITEM_TAG = new ItemTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemTagRecord> getRecordType() {
        return ItemTagRecord.class;
    }

    /**
     * The column <code>public.item_tag.id</code>.
     */
    public final TableField<ItemTagRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('item_tag_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.item_tag.value</code>.
     */
    public final TableField<ItemTagRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.item_tag.item_id</code>.
     */
    public final TableField<ItemTagRecord, Long> ITEM_ID = createField("item_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.item_tag</code> table reference
     */
    public ItemTag() {
        this(DSL.name("item_tag"), null);
    }

    /**
     * Create an aliased <code>public.item_tag</code> table reference
     */
    public ItemTag(String alias) {
        this(DSL.name(alias), ITEM_TAG);
    }

    /**
     * Create an aliased <code>public.item_tag</code> table reference
     */
    public ItemTag(Name alias) {
        this(alias, ITEM_TAG);
    }

    private ItemTag(Name alias, Table<ItemTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItemTag(Name alias, Table<ItemTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEM_TAG_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ItemTagRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ITEM_TAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItemTagRecord> getPrimaryKey() {
        return Keys.ITEM_TAG_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItemTagRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemTagRecord>>asList(Keys.ITEM_TAG_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ItemTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ItemTagRecord, ?>>asList(Keys.ITEM_TAG__ITEM_TAG_ITEM_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemTag as(String alias) {
        return new ItemTag(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemTag as(Name alias) {
        return new ItemTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemTag rename(String name) {
        return new ItemTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemTag rename(Name name) {
        return new ItemTag(name, null);
    }
}
