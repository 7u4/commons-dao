/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.tables.records.DefectFormFieldRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefectFormField extends TableImpl<DefectFormFieldRecord> {

    private static final long serialVersionUID = 1718498935;

    /**
     * The reference instance of <code>public.defect_form_field</code>
     */
    public static final DefectFormField DEFECT_FORM_FIELD = new DefectFormField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefectFormFieldRecord> getRecordType() {
        return DefectFormFieldRecord.class;
    }

    /**
     * The column <code>public.defect_form_field.id</code>.
     */
    public final TableField<DefectFormFieldRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('defect_form_field_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.defect_form_field.bugtracking_system</code>.
     */
    public final TableField<DefectFormFieldRecord, Integer> BUGTRACKING_SYSTEM = createField("bugtracking_system", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.defect_form_field.field_id</code>.
     */
    public final TableField<DefectFormFieldRecord, String> FIELD_ID = createField("field_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.defect_form_field.type</code>.
     */
    public final TableField<DefectFormFieldRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.defect_form_field.required</code>.
     */
    public final TableField<DefectFormFieldRecord, Boolean> REQUIRED = createField("required", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.defect_form_field.values</code>.
     */
    public final TableField<DefectFormFieldRecord, String[]> VALUES = createField("values", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * Create a <code>public.defect_form_field</code> table reference
     */
    public DefectFormField() {
        this(DSL.name("defect_form_field"), null);
    }

    /**
     * Create an aliased <code>public.defect_form_field</code> table reference
     */
    public DefectFormField(String alias) {
        this(DSL.name(alias), DEFECT_FORM_FIELD);
    }

    /**
     * Create an aliased <code>public.defect_form_field</code> table reference
     */
    public DefectFormField(Name alias) {
        this(alias, DEFECT_FORM_FIELD);
    }

    private DefectFormField(Name alias, Table<DefectFormFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private DefectFormField(Name alias, Table<DefectFormFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEFECT_FORM_FIELD_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DefectFormFieldRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DEFECT_FORM_FIELD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DefectFormFieldRecord> getPrimaryKey() {
        return Keys.DEFECT_FORM_FIELD_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DefectFormFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<DefectFormFieldRecord>>asList(Keys.DEFECT_FORM_FIELD_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DefectFormFieldRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DefectFormFieldRecord, ?>>asList(Keys.DEFECT_FORM_FIELD__DEFECT_FORM_FIELD_BUGTRACKING_SYSTEM_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefectFormField as(String alias) {
        return new DefectFormField(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefectFormField as(Name alias) {
        return new DefectFormField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DefectFormField rename(String name) {
        return new DefectFormField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DefectFormField rename(Name name) {
        return new DefectFormField(name, null);
    }
}
