/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.enums.ProjectTypeEnum;
import com.epam.ta.reportportal.jooq.tables.records.ProjectConfigurationRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectConfiguration extends TableImpl<ProjectConfigurationRecord> {

    private static final long serialVersionUID = 71257225;

    /**
     * The reference instance of <code>public.project_configuration</code>
     */
    public static final ProjectConfiguration PROJECT_CONFIGURATION = new ProjectConfiguration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectConfigurationRecord> getRecordType() {
        return ProjectConfigurationRecord.class;
    }

    /**
     * The column <code>public.project_configuration.id</code>.
     */
    public final TableField<ProjectConfigurationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('project_configuration_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.project_configuration.project_type</code>.
     */
    public final TableField<ProjectConfigurationRecord, ProjectTypeEnum> PROJECT_TYPE = createField("project_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.epam.ta.reportportal.jooq.enums.ProjectTypeEnum.class), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ProjectConfigurationRecord, Object> INTERRUPT_TIMEOUT = createField("interrupt_timeout", org.jooq.impl.DefaultDataType.getDefaultDataType("interval"), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ProjectConfigurationRecord, Object> KEEP_LOGS_INTERVAL = createField("keep_logs_interval", org.jooq.impl.DefaultDataType.getDefaultDataType("interval"), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ProjectConfigurationRecord, Object> KEEP_SCREENSHOTS_INTERVAL = createField("keep_screenshots_interval", org.jooq.impl.DefaultDataType.getDefaultDataType("interval"), this, "");

    /**
     * The column <code>public.project_configuration.aa_enabled</code>.
     */
    public final TableField<ProjectConfigurationRecord, Boolean> AA_ENABLED = createField("aa_enabled", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ProjectConfigurationRecord, Object> METADATA = createField("metadata", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * The column <code>public.project_configuration.email_configuration_id</code>.
     */
    public final TableField<ProjectConfigurationRecord, Integer> EMAIL_CONFIGURATION_ID = createField("email_configuration_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.project_configuration.created_on</code>.
     */
    public final TableField<ProjectConfigurationRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.project_configuration</code> table reference
     */
    public ProjectConfiguration() {
        this(DSL.name("project_configuration"), null);
    }

    /**
     * Create an aliased <code>public.project_configuration</code> table reference
     */
    public ProjectConfiguration(String alias) {
        this(DSL.name(alias), PROJECT_CONFIGURATION);
    }

    /**
     * Create an aliased <code>public.project_configuration</code> table reference
     */
    public ProjectConfiguration(Name alias) {
        this(alias, PROJECT_CONFIGURATION);
    }

    private ProjectConfiguration(Name alias, Table<ProjectConfigurationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectConfiguration(Name alias, Table<ProjectConfigurationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_CONFIGURATION_EMAIL_CONFIGURATION_ID_KEY, Indexes.PROJECT_CONFIGURATION_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectConfigurationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECT_CONFIGURATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectConfigurationRecord> getPrimaryKey() {
        return Keys.PROJECT_CONFIGURATION_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectConfigurationRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectConfigurationRecord>>asList(Keys.PROJECT_CONFIGURATION_PK, Keys.PROJECT_CONFIGURATION_EMAIL_CONFIGURATION_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectConfigurationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectConfigurationRecord, ?>>asList(Keys.PROJECT_CONFIGURATION__PROJECT_CONFIGURATION_EMAIL_CONFIGURATION_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectConfiguration as(String alias) {
        return new ProjectConfiguration(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectConfiguration as(Name alias) {
        return new ProjectConfiguration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectConfiguration rename(String name) {
        return new ProjectConfiguration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectConfiguration rename(Name name) {
        return new ProjectConfiguration(name, null);
    }
}
