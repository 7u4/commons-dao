/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.tables.records.OauthRegistrationScopeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthRegistrationScope extends TableImpl<OauthRegistrationScopeRecord> {

    private static final long serialVersionUID = -73247629;

    /**
     * The reference instance of <code>public.oauth_registration_scope</code>
     */
    public static final OauthRegistrationScope OAUTH_REGISTRATION_SCOPE = new OauthRegistrationScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthRegistrationScopeRecord> getRecordType() {
        return OauthRegistrationScopeRecord.class;
    }

    /**
     * The column <code>public.oauth_registration_scope.id</code>.
     */
    public final TableField<OauthRegistrationScopeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('oauth_registration_scope_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.oauth_registration_scope.oauth_registration_fk</code>.
     */
    public final TableField<OauthRegistrationScopeRecord, String> OAUTH_REGISTRATION_FK = createField("oauth_registration_fk", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.oauth_registration_scope.scope</code>.
     */
    public final TableField<OauthRegistrationScopeRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * Create a <code>public.oauth_registration_scope</code> table reference
     */
    public OauthRegistrationScope() {
        this(DSL.name("oauth_registration_scope"), null);
    }

    /**
     * Create an aliased <code>public.oauth_registration_scope</code> table reference
     */
    public OauthRegistrationScope(String alias) {
        this(DSL.name(alias), OAUTH_REGISTRATION_SCOPE);
    }

    /**
     * Create an aliased <code>public.oauth_registration_scope</code> table reference
     */
    public OauthRegistrationScope(Name alias) {
        this(alias, OAUTH_REGISTRATION_SCOPE);
    }

    private OauthRegistrationScope(Name alias, Table<OauthRegistrationScopeRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthRegistrationScope(Name alias, Table<OauthRegistrationScopeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OAUTH_REGISTRATION_SCOPE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OauthRegistrationScopeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OAUTH_REGISTRATION_SCOPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthRegistrationScopeRecord> getPrimaryKey() {
        return Keys.OAUTH_REGISTRATION_SCOPE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthRegistrationScopeRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthRegistrationScopeRecord>>asList(Keys.OAUTH_REGISTRATION_SCOPE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OauthRegistrationScopeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OauthRegistrationScopeRecord, ?>>asList(Keys.OAUTH_REGISTRATION_SCOPE__OAUTH_REGISTRATION_SCOPE_OAUTH_REGISTRATION_FK_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthRegistrationScope as(String alias) {
        return new OauthRegistrationScope(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthRegistrationScope as(Name alias) {
        return new OauthRegistrationScope(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthRegistrationScope rename(String name) {
        return new OauthRegistrationScope(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthRegistrationScope rename(Name name) {
        return new OauthRegistrationScope(name, null);
    }
}
