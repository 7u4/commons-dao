/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.tables.records.WidgetRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Widget extends TableImpl<WidgetRecord> {

    private static final long serialVersionUID = -901852043;

    /**
     * The reference instance of <code>public.widget</code>
     */
    public static final Widget WIDGET = new Widget();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WidgetRecord> getRecordType() {
        return WidgetRecord.class;
    }

    /**
     * The column <code>public.widget.id</code>.
     */
    public final TableField<WidgetRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('widget_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.widget.name</code>.
     */
    public final TableField<WidgetRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.widget.project_id</code>.
     */
    public final TableField<WidgetRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.widget</code> table reference
     */
    public Widget() {
        this(DSL.name("widget"), null);
    }

    /**
     * Create an aliased <code>public.widget</code> table reference
     */
    public Widget(String alias) {
        this(DSL.name(alias), WIDGET);
    }

    /**
     * Create an aliased <code>public.widget</code> table reference
     */
    public Widget(Name alias) {
        this(alias, WIDGET);
    }

    private Widget(Name alias, Table<WidgetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Widget(Name alias, Table<WidgetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WIDGET_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WidgetRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WIDGET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WidgetRecord> getPrimaryKey() {
        return Keys.WIDGET_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WidgetRecord>> getKeys() {
        return Arrays.<UniqueKey<WidgetRecord>>asList(Keys.WIDGET_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WidgetRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WidgetRecord, ?>>asList(Keys.WIDGET__WIDGET_PROJECT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Widget as(String alias) {
        return new Widget(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Widget as(Name alias) {
        return new Widget(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Widget rename(String name) {
        return new Widget(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Widget rename(Name name) {
        return new Widget(name, null);
    }
}
