/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.tables.records.IssueRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issue extends TableImpl<IssueRecord> {

    private static final long serialVersionUID = -212757615;

    /**
     * The reference instance of <code>public.issue</code>
     */
    public static final Issue ISSUE = new Issue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IssueRecord> getRecordType() {
        return IssueRecord.class;
    }

    /**
     * The column <code>public.issue.issue_id</code>.
     */
    public final TableField<IssueRecord, Long> ISSUE_ID = createField("issue_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.issue.issue_type</code>.
     */
    public final TableField<IssueRecord, Integer> ISSUE_TYPE = createField("issue_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.issue.issue_description</code>.
     */
    public final TableField<IssueRecord, String> ISSUE_DESCRIPTION = createField("issue_description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.issue.auto_analyzed</code>.
     */
    public final TableField<IssueRecord, Boolean> AUTO_ANALYZED = createField("auto_analyzed", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.issue.ignore_analyzer</code>.
     */
    public final TableField<IssueRecord, Boolean> IGNORE_ANALYZER = createField("ignore_analyzer", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.issue</code> table reference
     */
    public Issue() {
        this(DSL.name("issue"), null);
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(String alias) {
        this(DSL.name(alias), ISSUE);
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(Name alias) {
        this(alias, ISSUE);
    }

    private Issue(Name alias, Table<IssueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Issue(Name alias, Table<IssueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ISSUE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IssueRecord> getPrimaryKey() {
        return Keys.ISSUE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IssueRecord>> getKeys() {
        return Arrays.<UniqueKey<IssueRecord>>asList(Keys.ISSUE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<IssueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IssueRecord, ?>>asList(Keys.ISSUE__ISSUE_ISSUE_ID_FKEY, Keys.ISSUE__ISSUE_ISSUE_TYPE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Issue as(String alias) {
        return new Issue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Issue as(Name alias) {
        return new Issue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(String name) {
        return new Issue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(Name name) {
        return new Issue(name, null);
    }
}
