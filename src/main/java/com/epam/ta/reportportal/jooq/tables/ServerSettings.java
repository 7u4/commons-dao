/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.tables.records.ServerSettingsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerSettings extends TableImpl<ServerSettingsRecord> {

    private static final long serialVersionUID = -1726347553;

    /**
     * The reference instance of <code>public.server_settings</code>
     */
    public static final ServerSettings SERVER_SETTINGS = new ServerSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerSettingsRecord> getRecordType() {
        return ServerSettingsRecord.class;
    }

    /**
     * The column <code>public.server_settings.id</code>.
     */
    public final TableField<ServerSettingsRecord, Short> ID = createField("id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('server_settings_id_seq'::regclass)", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.server_settings.key</code>.
     */
    public final TableField<ServerSettingsRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.server_settings.value</code>.
     */
    public final TableField<ServerSettingsRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.server_settings</code> table reference
     */
    public ServerSettings() {
        this(DSL.name("server_settings"), null);
    }

    /**
     * Create an aliased <code>public.server_settings</code> table reference
     */
    public ServerSettings(String alias) {
        this(DSL.name(alias), SERVER_SETTINGS);
    }

    /**
     * Create an aliased <code>public.server_settings</code> table reference
     */
    public ServerSettings(Name alias) {
        this(alias, SERVER_SETTINGS);
    }

    private ServerSettings(Name alias, Table<ServerSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerSettings(Name alias, Table<ServerSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SERVER_SETTINGS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServerSettingsRecord, Short> getIdentity() {
        return Keys.IDENTITY_SERVER_SETTINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServerSettingsRecord> getPrimaryKey() {
        return Keys.SERVER_SETTINGS_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServerSettingsRecord>> getKeys() {
        return Arrays.<UniqueKey<ServerSettingsRecord>>asList(Keys.SERVER_SETTINGS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerSettings as(String alias) {
        return new ServerSettings(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerSettings as(Name alias) {
        return new ServerSettings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerSettings rename(String name) {
        return new ServerSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerSettings rename(Name name) {
        return new ServerSettings(name, null);
    }
}
