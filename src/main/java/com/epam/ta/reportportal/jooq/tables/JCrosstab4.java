/*
 *  Copyright (C) 2018 EPAM Systems
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.tables.records.JCrosstab4Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.11.4" }, comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCrosstab4 extends TableImpl<JCrosstab4Record> {

	private static final long serialVersionUID = 903617836;

	/**
	 * The reference instance of <code>public.crosstab4</code>
	 */
	public static final JCrosstab4 CROSSTAB4 = new JCrosstab4();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<JCrosstab4Record> getRecordType() {
		return JCrosstab4Record.class;
	}

	/**
	 * The column <code>public.crosstab4.crosstab4</code>.
	 */
	public final TableField<JCrosstab4Record, Object> CROSSTAB4_ = createField(
			"crosstab4",
			org.jooq.impl.DefaultDataType.getDefaultDataType("\"tablefunc_crosstab_4\""),
			this,
			""
	);

	/**
	 * Create a <code>public.crosstab4</code> table reference
	 */
	public JCrosstab4() {
		this(DSL.name("crosstab4"), null);
	}

	/**
	 * Create an aliased <code>public.crosstab4</code> table reference
	 */
	public JCrosstab4(String alias) {
		this(DSL.name(alias), CROSSTAB4);
	}

	/**
	 * Create an aliased <code>public.crosstab4</code> table reference
	 */
	public JCrosstab4(Name alias) {
		this(alias, CROSSTAB4);
	}

	private JCrosstab4(Name alias, Table<JCrosstab4Record> aliased) {
		this(alias, aliased, new Field[1]);
	}

	private JCrosstab4(Name alias, Table<JCrosstab4Record> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> JCrosstab4(Table<O> child, ForeignKey<O, JCrosstab4Record> key) {
		super(child, key, CROSSTAB4);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return JPublic.PUBLIC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JCrosstab4 as(String alias) {
		return new JCrosstab4(DSL.name(alias), this, parameters);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JCrosstab4 as(Name alias) {
		return new JCrosstab4(alias, this, parameters);
	}

	/**
	 * Rename this table
	 */
	@Override
	public JCrosstab4 rename(String name) {
		return new JCrosstab4(DSL.name(name), null, parameters);
	}

	/**
	 * Rename this table
	 */
	@Override
	public JCrosstab4 rename(Name name) {
		return new JCrosstab4(name, null, parameters);
	}

	/**
	 * Call this table-valued function
	 */
	public JCrosstab4 call(String __1) {
		return new JCrosstab4(DSL.name(getName()), null, new Field[] { DSL.val(__1, org.jooq.impl.SQLDataType.CLOB) });
	}

	/**
	 * Call this table-valued function
	 */
	public JCrosstab4 call(Field<String> __1) {
		return new JCrosstab4(DSL.name(getName()), null, new Field[] { __1 });
	}
}
