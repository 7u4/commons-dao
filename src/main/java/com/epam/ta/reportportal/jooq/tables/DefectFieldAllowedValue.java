/*
 * This file is generated by jOOQ.
*/
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.Public;
import com.epam.ta.reportportal.jooq.tables.records.DefectFieldAllowedValueRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefectFieldAllowedValue extends TableImpl<DefectFieldAllowedValueRecord> {

    private static final long serialVersionUID = 1322551860;

    /**
     * The reference instance of <code>public.defect_field_allowed_value</code>
     */
    public static final DefectFieldAllowedValue DEFECT_FIELD_ALLOWED_VALUE = new DefectFieldAllowedValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefectFieldAllowedValueRecord> getRecordType() {
        return DefectFieldAllowedValueRecord.class;
    }

    /**
     * The column <code>public.defect_field_allowed_value.id</code>.
     */
    public final TableField<DefectFieldAllowedValueRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('defect_field_allowed_value_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.defect_field_allowed_value.defect_form_field</code>.
     */
    public final TableField<DefectFieldAllowedValueRecord, Integer> DEFECT_FORM_FIELD = createField("defect_form_field", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.defect_field_allowed_value.value_id</code>.
     */
    public final TableField<DefectFieldAllowedValueRecord, String> VALUE_ID = createField("value_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.defect_field_allowed_value.value_name</code>.
     */
    public final TableField<DefectFieldAllowedValueRecord, String> VALUE_NAME = createField("value_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.defect_field_allowed_value</code> table reference
     */
    public DefectFieldAllowedValue() {
        this(DSL.name("defect_field_allowed_value"), null);
    }

    /**
     * Create an aliased <code>public.defect_field_allowed_value</code> table reference
     */
    public DefectFieldAllowedValue(String alias) {
        this(DSL.name(alias), DEFECT_FIELD_ALLOWED_VALUE);
    }

    /**
     * Create an aliased <code>public.defect_field_allowed_value</code> table reference
     */
    public DefectFieldAllowedValue(Name alias) {
        this(alias, DEFECT_FIELD_ALLOWED_VALUE);
    }

    private DefectFieldAllowedValue(Name alias, Table<DefectFieldAllowedValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private DefectFieldAllowedValue(Name alias, Table<DefectFieldAllowedValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEFECT_FIELD_ALLOWED_VALUE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DefectFieldAllowedValueRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DEFECT_FIELD_ALLOWED_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DefectFieldAllowedValueRecord> getPrimaryKey() {
        return Keys.DEFECT_FIELD_ALLOWED_VALUE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DefectFieldAllowedValueRecord>> getKeys() {
        return Arrays.<UniqueKey<DefectFieldAllowedValueRecord>>asList(Keys.DEFECT_FIELD_ALLOWED_VALUE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DefectFieldAllowedValueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DefectFieldAllowedValueRecord, ?>>asList(Keys.DEFECT_FIELD_ALLOWED_VALUE__DEFECT_FIELD_ALLOWED_VALUE_DEFECT_FORM_FIELD_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefectFieldAllowedValue as(String alias) {
        return new DefectFieldAllowedValue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefectFieldAllowedValue as(Name alias) {
        return new DefectFieldAllowedValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DefectFieldAllowedValue rename(String name) {
        return new DefectFieldAllowedValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DefectFieldAllowedValue rename(Name name) {
        return new DefectFieldAllowedValue(name, null);
    }
}
